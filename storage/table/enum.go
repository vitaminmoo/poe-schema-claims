//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Enum = newEnumTable("", "enum", "")

type enumTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	Source       sqlite.ColumnString
	Name         sqlite.ColumnString
	ClientLabels sqlite.ColumnString
	ServerLabels sqlite.ColumnString
	Vals         sqlite.ColumnString
	ZeroIndexed  sqlite.ColumnBool

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type EnumTable struct {
	enumTable

	EXCLUDED enumTable
}

// AS creates new EnumTable with assigned alias
func (a EnumTable) AS(alias string) *EnumTable {
	return newEnumTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnumTable with assigned schema name
func (a EnumTable) FromSchema(schemaName string) *EnumTable {
	return newEnumTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnumTable with assigned table prefix
func (a EnumTable) WithPrefix(prefix string) *EnumTable {
	return newEnumTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnumTable with assigned table suffix
func (a EnumTable) WithSuffix(suffix string) *EnumTable {
	return newEnumTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnumTable(schemaName, tableName, alias string) *EnumTable {
	return &EnumTable{
		enumTable: newEnumTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newEnumTableImpl("", "excluded", ""),
	}
}

func newEnumTableImpl(schemaName, tableName, alias string) enumTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		SourceColumn       = sqlite.StringColumn("source")
		NameColumn         = sqlite.StringColumn("name")
		ClientLabelsColumn = sqlite.StringColumn("client_labels")
		ServerLabelsColumn = sqlite.StringColumn("server_labels")
		ValsColumn         = sqlite.StringColumn("vals")
		ZeroIndexedColumn  = sqlite.BoolColumn("zero_indexed")
		allColumns         = sqlite.ColumnList{IDColumn, SourceColumn, NameColumn, ClientLabelsColumn, ServerLabelsColumn, ValsColumn, ZeroIndexedColumn}
		mutableColumns     = sqlite.ColumnList{SourceColumn, NameColumn, ClientLabelsColumn, ServerLabelsColumn, ValsColumn, ZeroIndexedColumn}
		defaultColumns     = sqlite.ColumnList{}
	)

	return enumTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Source:       SourceColumn,
		Name:         NameColumn,
		ClientLabels: ClientLabelsColumn,
		ServerLabels: ServerLabelsColumn,
		Vals:         ValsColumn,
		ZeroIndexed:  ZeroIndexedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
