//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for Scalar0Type.
const (
	Bool    Scalar0Type = "Bool"
	F32     Scalar0Type = "F32"
	I16     Scalar0Type = "I16"
	I32     Scalar0Type = "I32"
	I64     Scalar0Type = "I64"
	SelfRow Scalar0Type = "SelfRow"
	String  Scalar0Type = "String"
	U16     Scalar0Type = "U16"
	U32     Scalar0Type = "U32"
	U64     Scalar0Type = "U64"
	Unknown Scalar0Type = "Unknown"
)

// Defines values for Scalar1Type.
const (
	EnumRow    Scalar1Type = "EnumRow"
	ForeignRow Scalar1Type = "ForeignRow"
	RowRef     Scalar1Type = "RowRef"
)

// ColumnClaim defines model for ColumnClaim.
type ColumnClaim struct {
	// Bytes Number of bytes used by the ColumnClaim, starting at the offset
	Bytes  int    `json:"bytes"`
	Column Scalar `json:"column"`

	// Datfile The datfile basename that this ColumnClaim references
	Datfile string `json:"datfile"`

	// Id Unique ID of the column claim
	Id *string `json:"id,omitempty"`

	// IsArray Whether the ColumnClaim is an array
	IsArray *bool `json:"is_array,omitempty"`

	// Labels Arbitrary key/value metadata about the ColumnClaim
	Labels map[string]string `json:"labels"`

	// Name User-defined name of the column claim (optional)
	Name string `json:"name"`

	// Offset Byte offset of the start of the ColumnClaim in each row
	Offset int `json:"offset"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`
}

// ColumnClaimUpdate defines model for ColumnClaimUpdate.
type ColumnClaimUpdate struct {
	// Bytes Number of bytes used by the ColumnClaim, starting at the offset
	Bytes  *int    `json:"bytes,omitempty"`
	Column *Scalar `json:"column,omitempty"`

	// Datfile The datfile basename that this ColumnClaim references
	Datfile *string `json:"datfile,omitempty"`

	// Id Unique ID of the column claim
	Id *string `json:"id,omitempty"`

	// IsArray Whether the ColumnClaim is an array
	IsArray *bool `json:"is_array,omitempty"`

	// Labels Arbitrary key/value metadata about the ColumnClaim
	Labels *map[string]string `json:"labels,omitempty"`

	// Name User-defined name of the column claim (optional)
	Name *string `json:"name,omitempty"`

	// Offset Byte offset of the start of the ColumnClaim in each row
	Offset *int `json:"offset,omitempty"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`
}

// Enum defines model for Enum.
type Enum struct {
	// Id Unique ID of the Enum
	Id *string `json:"id,omitempty"`

	// Labels Arbitrary key/value metadata about the Enum
	Labels map[string]string `json:"labels"`

	// Name User-defined name of the Enum (optional)
	Name string `json:"name"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`

	// Values Ordered list of Enum values
	Values []string `json:"values"`

	// ZeroIndexed Whether the Enum is zero-indexed (true) or one-indexed
	ZeroIndexed bool `json:"zero_indexed"`
}

// EnumUpdate defines model for EnumUpdate.
type EnumUpdate struct {
	// Id Unique ID of the Enum
	Id *string `json:"id,omitempty"`

	// Labels Arbitrary key/value metadata about the Enum
	Labels *map[string]string `json:"labels,omitempty"`

	// Name User-defined name of the Enum (optional)
	Name *string `json:"name,omitempty"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`

	// Values Ordered list of Enum values
	Values *[]string `json:"values,omitempty"`

	// ZeroIndexed Whether the Enum is zero-indexed (true) or one-indexed
	ZeroIndexed *bool `json:"zero_indexed,omitempty"`
}

// Error Generic Error Body
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NotFound Not Found Error Body
type NotFound struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Scalar defines model for Scalar.
type Scalar struct {
	union json.RawMessage
}

// Scalar0 defines model for .
type Scalar0 struct {
	Type Scalar0Type `json:"type"`
}

// Scalar0Type defines model for Scalar.0.Type.
type Scalar0Type string

// Scalar1 defines model for .
type Scalar1 struct {
	// Target The name of the table or enum this column points to
	Target string      `json:"target"`
	Type   Scalar1Type `json:"type"`
}

// Scalar1Type defines model for Scalar.1.Type.
type Scalar1Type string

// PutColumnclaimsJSONRequestBody defines body for PutColumnclaims for application/json ContentType.
type PutColumnclaimsJSONRequestBody = ColumnClaim

// PutColumnclaimsIdJSONRequestBody defines body for PutColumnclaimsId for application/json ContentType.
type PutColumnclaimsIdJSONRequestBody = ColumnClaimUpdate

// PutEnumsJSONRequestBody defines body for PutEnums for application/json ContentType.
type PutEnumsJSONRequestBody = Enum

// PutEnumsIdJSONRequestBody defines body for PutEnumsId for application/json ContentType.
type PutEnumsIdJSONRequestBody = EnumUpdate

// AsScalar0 returns the union data inside the Scalar as a Scalar0
func (t Scalar) AsScalar0() (Scalar0, error) {
	var body Scalar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScalar0 overwrites any union data inside the Scalar as the provided Scalar0
func (t *Scalar) FromScalar0(v Scalar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScalar0 performs a merge with any union data inside the Scalar, using the provided Scalar0
func (t *Scalar) MergeScalar0(v Scalar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScalar1 returns the union data inside the Scalar as a Scalar1
func (t Scalar) AsScalar1() (Scalar1, error) {
	var body Scalar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScalar1 overwrites any union data inside the Scalar as the provided Scalar1
func (t *Scalar) FromScalar1(v Scalar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScalar1 performs a merge with any union data inside the Scalar, using the provided Scalar1
func (t *Scalar) MergeScalar1(v Scalar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scalar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scalar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ColumnClaim objects
	// (GET /columnclaims)
	GetColumnclaims(w http.ResponseWriter, r *http.Request)
	// Create a ColumnClaim object
	// (PUT /columnclaims)
	PutColumnclaims(w http.ResponseWriter, r *http.Request)
	// Delete a ColumnClaim object
	// (DELETE /columnclaims/{id})
	DeleteColumnclaimsId(w http.ResponseWriter, r *http.Request, id string)
	// Get a ColumnClaim object
	// (GET /columnclaims/{id})
	GetColumnclaimsId(w http.ResponseWriter, r *http.Request, id string)
	// Update a ColumnClaim object
	// (PUT /columnclaims/{id})
	PutColumnclaimsId(w http.ResponseWriter, r *http.Request, id string)
	// List all Enum objects
	// (GET /enums)
	GetEnums(w http.ResponseWriter, r *http.Request)
	// Create a Enum object
	// (PUT /enums)
	PutEnums(w http.ResponseWriter, r *http.Request)
	// Delete a Enum object
	// (DELETE /enums/{id})
	DeleteEnumsId(w http.ResponseWriter, r *http.Request, id string)
	// Get a Enum object
	// (GET /enums/{id})
	GetEnumsId(w http.ResponseWriter, r *http.Request, id string)
	// Update a Enum object
	// (PUT /enums/{id})
	PutEnumsId(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetColumnclaims operation middleware
func (siw *ServerInterfaceWrapper) GetColumnclaims(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetColumnclaims(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutColumnclaims operation middleware
func (siw *ServerInterfaceWrapper) PutColumnclaims(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutColumnclaims(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteColumnclaimsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteColumnclaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteColumnclaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetColumnclaimsId operation middleware
func (siw *ServerInterfaceWrapper) GetColumnclaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetColumnclaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutColumnclaimsId operation middleware
func (siw *ServerInterfaceWrapper) PutColumnclaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutColumnclaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEnums operation middleware
func (siw *ServerInterfaceWrapper) GetEnums(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnums(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutEnums operation middleware
func (siw *ServerInterfaceWrapper) PutEnums(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEnums(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEnumsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEnumsId operation middleware
func (siw *ServerInterfaceWrapper) GetEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutEnumsId operation middleware
func (siw *ServerInterfaceWrapper) PutEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/columnclaims", wrapper.GetColumnclaims)
	m.HandleFunc("PUT "+options.BaseURL+"/columnclaims", wrapper.PutColumnclaims)
	m.HandleFunc("DELETE "+options.BaseURL+"/columnclaims/{id}", wrapper.DeleteColumnclaimsId)
	m.HandleFunc("GET "+options.BaseURL+"/columnclaims/{id}", wrapper.GetColumnclaimsId)
	m.HandleFunc("PUT "+options.BaseURL+"/columnclaims/{id}", wrapper.PutColumnclaimsId)
	m.HandleFunc("GET "+options.BaseURL+"/enums", wrapper.GetEnums)
	m.HandleFunc("PUT "+options.BaseURL+"/enums", wrapper.PutEnums)
	m.HandleFunc("DELETE "+options.BaseURL+"/enums/{id}", wrapper.DeleteEnumsId)
	m.HandleFunc("GET "+options.BaseURL+"/enums/{id}", wrapper.GetEnumsId)
	m.HandleFunc("PUT "+options.BaseURL+"/enums/{id}", wrapper.PutEnumsId)

	return m
}

type ErrorJSONResponse Error

type NotFoundJSONResponse NotFound

type GetColumnclaimsRequestObject struct {
}

type GetColumnclaimsResponseObject interface {
	VisitGetColumnclaimsResponse(w http.ResponseWriter) error
}

type GetColumnclaims200JSONResponse []ColumnClaim

func (response GetColumnclaims200JSONResponse) VisitGetColumnclaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnclaimsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetColumnclaimsdefaultJSONResponse) VisitGetColumnclaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutColumnclaimsRequestObject struct {
	Body *PutColumnclaimsJSONRequestBody
}

type PutColumnclaimsResponseObject interface {
	VisitPutColumnclaimsResponse(w http.ResponseWriter) error
}

type PutColumnclaims201ResponseHeaders struct {
	Location string
}

type PutColumnclaims201JSONResponse struct {
	Body    ColumnClaim
	Headers PutColumnclaims201ResponseHeaders
}

func (response PutColumnclaims201JSONResponse) VisitPutColumnclaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutColumnclaimsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutColumnclaimsdefaultJSONResponse) VisitPutColumnclaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteColumnclaimsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteColumnclaimsIdResponseObject interface {
	VisitDeleteColumnclaimsIdResponse(w http.ResponseWriter) error
}

type DeleteColumnclaimsId204Response struct {
}

func (response DeleteColumnclaimsId204Response) VisitDeleteColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteColumnclaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteColumnclaimsId404JSONResponse) VisitDeleteColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnclaimsIdRequestObject struct {
	Id string `json:"id"`
}

type GetColumnclaimsIdResponseObject interface {
	VisitGetColumnclaimsIdResponse(w http.ResponseWriter) error
}

type GetColumnclaimsId200JSONResponse ColumnClaim

func (response GetColumnclaimsId200JSONResponse) VisitGetColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnclaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetColumnclaimsId404JSONResponse) VisitGetColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnclaimsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutColumnclaimsIdJSONRequestBody
}

type PutColumnclaimsIdResponseObject interface {
	VisitPutColumnclaimsIdResponse(w http.ResponseWriter) error
}

type PutColumnclaimsId200JSONResponse ColumnClaim

func (response PutColumnclaimsId200JSONResponse) VisitPutColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnclaimsId304JSONResponse ColumnClaim

func (response PutColumnclaimsId304JSONResponse) VisitPutColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnclaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutColumnclaimsId404JSONResponse) VisitPutColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnclaimsIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutColumnclaimsIddefaultJSONResponse) VisitPutColumnclaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnumsRequestObject struct {
}

type GetEnumsResponseObject interface {
	VisitGetEnumsResponse(w http.ResponseWriter) error
}

type GetEnums200JSONResponse []Enum

func (response GetEnums200JSONResponse) VisitGetEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetEnumsdefaultJSONResponse) VisitGetEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutEnumsRequestObject struct {
	Body *PutEnumsJSONRequestBody
}

type PutEnumsResponseObject interface {
	VisitPutEnumsResponse(w http.ResponseWriter) error
}

type PutEnums201ResponseHeaders struct {
	Location string
}

type PutEnums201JSONResponse struct {
	Body    Enum
	Headers PutEnums201ResponseHeaders
}

func (response PutEnums201JSONResponse) VisitPutEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutEnumsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutEnumsdefaultJSONResponse) VisitPutEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEnumsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteEnumsIdResponseObject interface {
	VisitDeleteEnumsIdResponse(w http.ResponseWriter) error
}

type DeleteEnumsId204Response struct {
}

func (response DeleteEnumsId204Response) VisitDeleteEnumsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteEnumsId404JSONResponse) VisitDeleteEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsIdRequestObject struct {
	Id string `json:"id"`
}

type GetEnumsIdResponseObject interface {
	VisitGetEnumsIdResponse(w http.ResponseWriter) error
}

type GetEnumsId200JSONResponse Enum

func (response GetEnumsId200JSONResponse) VisitGetEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetEnumsId404JSONResponse) VisitGetEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutEnumsIdJSONRequestBody
}

type PutEnumsIdResponseObject interface {
	VisitPutEnumsIdResponse(w http.ResponseWriter) error
}

type PutEnumsId200JSONResponse Enum

func (response PutEnumsId200JSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsId304JSONResponse Enum

func (response PutEnumsId304JSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutEnumsId404JSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutEnumsIddefaultJSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all ColumnClaim objects
	// (GET /columnclaims)
	GetColumnclaims(ctx context.Context, request GetColumnclaimsRequestObject) (GetColumnclaimsResponseObject, error)
	// Create a ColumnClaim object
	// (PUT /columnclaims)
	PutColumnclaims(ctx context.Context, request PutColumnclaimsRequestObject) (PutColumnclaimsResponseObject, error)
	// Delete a ColumnClaim object
	// (DELETE /columnclaims/{id})
	DeleteColumnclaimsId(ctx context.Context, request DeleteColumnclaimsIdRequestObject) (DeleteColumnclaimsIdResponseObject, error)
	// Get a ColumnClaim object
	// (GET /columnclaims/{id})
	GetColumnclaimsId(ctx context.Context, request GetColumnclaimsIdRequestObject) (GetColumnclaimsIdResponseObject, error)
	// Update a ColumnClaim object
	// (PUT /columnclaims/{id})
	PutColumnclaimsId(ctx context.Context, request PutColumnclaimsIdRequestObject) (PutColumnclaimsIdResponseObject, error)
	// List all Enum objects
	// (GET /enums)
	GetEnums(ctx context.Context, request GetEnumsRequestObject) (GetEnumsResponseObject, error)
	// Create a Enum object
	// (PUT /enums)
	PutEnums(ctx context.Context, request PutEnumsRequestObject) (PutEnumsResponseObject, error)
	// Delete a Enum object
	// (DELETE /enums/{id})
	DeleteEnumsId(ctx context.Context, request DeleteEnumsIdRequestObject) (DeleteEnumsIdResponseObject, error)
	// Get a Enum object
	// (GET /enums/{id})
	GetEnumsId(ctx context.Context, request GetEnumsIdRequestObject) (GetEnumsIdResponseObject, error)
	// Update a Enum object
	// (PUT /enums/{id})
	PutEnumsId(ctx context.Context, request PutEnumsIdRequestObject) (PutEnumsIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetColumnclaims operation middleware
func (sh *strictHandler) GetColumnclaims(w http.ResponseWriter, r *http.Request) {
	var request GetColumnclaimsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetColumnclaims(ctx, request.(GetColumnclaimsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetColumnclaims")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetColumnclaimsResponseObject); ok {
		if err := validResponse.VisitGetColumnclaimsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutColumnclaims operation middleware
func (sh *strictHandler) PutColumnclaims(w http.ResponseWriter, r *http.Request) {
	var request PutColumnclaimsRequestObject

	var body PutColumnclaimsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutColumnclaims(ctx, request.(PutColumnclaimsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutColumnclaims")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutColumnclaimsResponseObject); ok {
		if err := validResponse.VisitPutColumnclaimsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteColumnclaimsId operation middleware
func (sh *strictHandler) DeleteColumnclaimsId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteColumnclaimsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteColumnclaimsId(ctx, request.(DeleteColumnclaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteColumnclaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteColumnclaimsIdResponseObject); ok {
		if err := validResponse.VisitDeleteColumnclaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetColumnclaimsId operation middleware
func (sh *strictHandler) GetColumnclaimsId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetColumnclaimsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetColumnclaimsId(ctx, request.(GetColumnclaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetColumnclaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetColumnclaimsIdResponseObject); ok {
		if err := validResponse.VisitGetColumnclaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutColumnclaimsId operation middleware
func (sh *strictHandler) PutColumnclaimsId(w http.ResponseWriter, r *http.Request, id string) {
	var request PutColumnclaimsIdRequestObject

	request.Id = id

	var body PutColumnclaimsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutColumnclaimsId(ctx, request.(PutColumnclaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutColumnclaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutColumnclaimsIdResponseObject); ok {
		if err := validResponse.VisitPutColumnclaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnums operation middleware
func (sh *strictHandler) GetEnums(w http.ResponseWriter, r *http.Request) {
	var request GetEnumsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnums(ctx, request.(GetEnumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnums")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnumsResponseObject); ok {
		if err := validResponse.VisitGetEnumsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEnums operation middleware
func (sh *strictHandler) PutEnums(w http.ResponseWriter, r *http.Request) {
	var request PutEnumsRequestObject

	var body PutEnumsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnums(ctx, request.(PutEnumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnums")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEnumsResponseObject); ok {
		if err := validResponse.VisitPutEnumsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnumsId operation middleware
func (sh *strictHandler) DeleteEnumsId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteEnumsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnumsId(ctx, request.(DeleteEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnumsIdResponseObject); ok {
		if err := validResponse.VisitDeleteEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnumsId operation middleware
func (sh *strictHandler) GetEnumsId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetEnumsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnumsId(ctx, request.(GetEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnumsIdResponseObject); ok {
		if err := validResponse.VisitGetEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEnumsId operation middleware
func (sh *strictHandler) PutEnumsId(w http.ResponseWriter, r *http.Request, id string) {
	var request PutEnumsIdRequestObject

	request.Id = id

	var body PutEnumsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnumsId(ctx, request.(PutEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEnumsIdResponseObject); ok {
		if err := validResponse.VisitPutEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ACcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
