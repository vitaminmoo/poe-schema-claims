//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for Scalar0Type.
const (
	Bool    Scalar0Type = "Bool"
	F32     Scalar0Type = "F32"
	I16     Scalar0Type = "I16"
	I32     Scalar0Type = "I32"
	I64     Scalar0Type = "I64"
	SelfRow Scalar0Type = "SelfRow"
	String  Scalar0Type = "String"
	U16     Scalar0Type = "U16"
	U32     Scalar0Type = "U32"
	U64     Scalar0Type = "U64"
	Unknown Scalar0Type = "Unknown"
)

// Defines values for Scalar1Type.
const (
	EnumRow    Scalar1Type = "EnumRow"
	ForeignRow Scalar1Type = "ForeignRow"
	RowRef     Scalar1Type = "RowRef"
)

// ColumnClaim defines model for ColumnClaim.
type ColumnClaim struct {
	// Bytes Number of bytes used by the ColumnClaim, starting at the offset
	Bytes int `json:"bytes"`

	// ClientLabels Arbitrary key/value metadata about the ColumnClaim, set by the submitter
	ClientLabels map[string]string `json:"client_labels"`
	Column       Scalar            `json:"column"`

	// Datfile The datfile basename that this ColumnClaim references
	Datfile string `json:"datfile"`

	// Id Unique ID of the ColumnClaim
	Id *int64 `json:"id,omitempty"`

	// IsArray Whether the ColumnClaim is an array
	IsArray *bool `json:"is_array,omitempty"`

	// Name User-defined name of the ColumnClaim
	Name *string `json:"name,omitempty"`

	// Offset Byte offset of the start of the ColumnClaim in each row
	Offset int `json:"offset"`

	// ServerLabels Arbitrary key/value metadata about the ColumnClaim, set by the system
	ServerLabels *map[string]string `json:"server_labels,omitempty"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`
}

// ColumnClaimUpdate defines model for ColumnClaimUpdate.
type ColumnClaimUpdate struct {
	// Bytes Number of bytes used by the ColumnClaim, starting at the offset
	Bytes *int `json:"bytes,omitempty"`

	// ClientLabels Arbitrary key/value metadata about the ColumnClaim, set by the submitter
	ClientLabels *map[string]string `json:"client_labels,omitempty"`
	Column       *Scalar            `json:"column,omitempty"`

	// Datfile The datfile basename that this ColumnClaim references
	Datfile *string `json:"datfile,omitempty"`

	// Id Unique ID of the ColumnClaim
	Id *int64 `json:"id,omitempty"`

	// IsArray Whether the ColumnClaim is an array
	IsArray *bool `json:"is_array,omitempty"`

	// Name User-defined name of the ColumnClaim
	Name *string `json:"name,omitempty"`

	// Offset Byte offset of the start of the ColumnClaim in each row
	Offset *int `json:"offset,omitempty"`

	// ServerLabels Arbitrary key/value metadata about the ColumnClaim, set by the system
	ServerLabels *map[string]string `json:"server_labels,omitempty"`

	// Source Identity of the user ro tool that created the ColumnClaim (read-only)
	Source *string `json:"source,omitempty"`
}

// Enum defines model for Enum.
type Enum struct {
	// ClientLabels Arbitrary key/value metadata about the Enum, set by the submitter
	ClientLabels map[string]string `json:"client_labels"`

	// Id Unique ID of the Enum
	Id *int64 `json:"id,omitempty"`

	// Name User-defined name of the Enum
	Name string `json:"name"`

	// ServerLabels Arbitrary key/value metadata about the Enum, set by the system
	ServerLabels *map[string]string `json:"server_labels,omitempty"`

	// Source Identity of the user ro tool that created the Enum (read-only)
	Source *string `json:"source,omitempty"`

	// Values Ordered list of Enum values
	Values []string `json:"values"`

	// ZeroIndexed Whether the Enum is zero-indexed (true) or one-indexed
	ZeroIndexed bool `json:"zero_indexed"`
}

// EnumUpdate defines model for EnumUpdate.
type EnumUpdate struct {
	// ClientLabels Arbitrary key/value metadata about the Enum, set by the submitter
	ClientLabels *map[string]string `json:"client_labels,omitempty"`

	// Id Unique ID of the Enum
	Id *int64 `json:"id,omitempty"`

	// Name User-defined name of the Enum
	Name *string `json:"name,omitempty"`

	// ServerLabels Arbitrary key/value metadata about the Enum, set by the system
	ServerLabels *map[string]string `json:"server_labels,omitempty"`

	// Source Identity of the user ro tool that created the Enum (read-only)
	Source *string `json:"source,omitempty"`

	// Values Ordered list of Enum values
	Values *[]string `json:"values,omitempty"`

	// ZeroIndexed Whether the Enum is zero-indexed (true) or one-indexed
	ZeroIndexed *bool `json:"zero_indexed,omitempty"`
}

// Error Generic Error Body
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NotFound Not Found Error Body
type NotFound struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Scalar defines model for Scalar.
type Scalar struct {
	union json.RawMessage
}

// Scalar0 defines model for .
type Scalar0 struct {
	Type Scalar0Type `json:"type"`
}

// Scalar0Type defines model for Scalar.0.Type.
type Scalar0Type string

// Scalar1 defines model for .
type Scalar1 struct {
	// Target The name of the table or enum this column points to
	Target string      `json:"target"`
	Type   Scalar1Type `json:"type"`
}

// Scalar1Type defines model for Scalar.1.Type.
type Scalar1Type string

// PutColumnClaimsJSONRequestBody defines body for PutColumnClaims for application/json ContentType.
type PutColumnClaimsJSONRequestBody = ColumnClaim

// PutColumnClaimsIdJSONRequestBody defines body for PutColumnClaimsId for application/json ContentType.
type PutColumnClaimsIdJSONRequestBody = ColumnClaimUpdate

// PutEnumsJSONRequestBody defines body for PutEnums for application/json ContentType.
type PutEnumsJSONRequestBody = Enum

// PutEnumsIdJSONRequestBody defines body for PutEnumsId for application/json ContentType.
type PutEnumsIdJSONRequestBody = EnumUpdate

// AsScalar0 returns the union data inside the Scalar as a Scalar0
func (t Scalar) AsScalar0() (Scalar0, error) {
	var body Scalar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScalar0 overwrites any union data inside the Scalar as the provided Scalar0
func (t *Scalar) FromScalar0(v Scalar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScalar0 performs a merge with any union data inside the Scalar, using the provided Scalar0
func (t *Scalar) MergeScalar0(v Scalar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScalar1 returns the union data inside the Scalar as a Scalar1
func (t Scalar) AsScalar1() (Scalar1, error) {
	var body Scalar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScalar1 overwrites any union data inside the Scalar as the provided Scalar1
func (t *Scalar) FromScalar1(v Scalar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScalar1 performs a merge with any union data inside the Scalar, using the provided Scalar1
func (t *Scalar) MergeScalar1(v Scalar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scalar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scalar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ColumnClaim objects
	// (GET /column_claims)
	GetColumnClaims(w http.ResponseWriter, r *http.Request)
	// Create a ColumnClaim object
	// (PUT /column_claims)
	PutColumnClaims(w http.ResponseWriter, r *http.Request)
	// Delete a ColumnClaim object
	// (DELETE /column_claims/{id})
	DeleteColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a ColumnClaim object
	// (GET /column_claims/{id})
	GetColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a ColumnClaim object
	// (PUT /column_claims/{id})
	PutColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64)
	// List all Enum objects
	// (GET /enums)
	GetEnums(w http.ResponseWriter, r *http.Request)
	// Create a Enum object
	// (PUT /enums)
	PutEnums(w http.ResponseWriter, r *http.Request)
	// Delete a Enum object
	// (DELETE /enums/{id})
	DeleteEnumsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a Enum object
	// (GET /enums/{id})
	GetEnumsId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a Enum object
	// (PUT /enums/{id})
	PutEnumsId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetColumnClaims operation middleware
func (siw *ServerInterfaceWrapper) GetColumnClaims(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetColumnClaims(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutColumnClaims operation middleware
func (siw *ServerInterfaceWrapper) PutColumnClaims(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutColumnClaims(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteColumnClaimsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteColumnClaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteColumnClaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetColumnClaimsId operation middleware
func (siw *ServerInterfaceWrapper) GetColumnClaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetColumnClaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutColumnClaimsId operation middleware
func (siw *ServerInterfaceWrapper) PutColumnClaimsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutColumnClaimsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEnums operation middleware
func (siw *ServerInterfaceWrapper) GetEnums(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnums(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutEnums operation middleware
func (siw *ServerInterfaceWrapper) PutEnums(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEnums(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEnumsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEnumsId operation middleware
func (siw *ServerInterfaceWrapper) GetEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutEnumsId operation middleware
func (siw *ServerInterfaceWrapper) PutEnumsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEnumsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/column_claims", wrapper.GetColumnClaims)
	m.HandleFunc("PUT "+options.BaseURL+"/column_claims", wrapper.PutColumnClaims)
	m.HandleFunc("DELETE "+options.BaseURL+"/column_claims/{id}", wrapper.DeleteColumnClaimsId)
	m.HandleFunc("GET "+options.BaseURL+"/column_claims/{id}", wrapper.GetColumnClaimsId)
	m.HandleFunc("PUT "+options.BaseURL+"/column_claims/{id}", wrapper.PutColumnClaimsId)
	m.HandleFunc("GET "+options.BaseURL+"/enums", wrapper.GetEnums)
	m.HandleFunc("PUT "+options.BaseURL+"/enums", wrapper.PutEnums)
	m.HandleFunc("DELETE "+options.BaseURL+"/enums/{id}", wrapper.DeleteEnumsId)
	m.HandleFunc("GET "+options.BaseURL+"/enums/{id}", wrapper.GetEnumsId)
	m.HandleFunc("PUT "+options.BaseURL+"/enums/{id}", wrapper.PutEnumsId)

	return m
}

type ErrorJSONResponse Error

type NotFoundJSONResponse NotFound

type GetColumnClaimsRequestObject struct {
}

type GetColumnClaimsResponseObject interface {
	VisitGetColumnClaimsResponse(w http.ResponseWriter) error
}

type GetColumnClaims200JSONResponse []ColumnClaim

func (response GetColumnClaims200JSONResponse) VisitGetColumnClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnClaimsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetColumnClaimsdefaultJSONResponse) VisitGetColumnClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutColumnClaimsRequestObject struct {
	Body *PutColumnClaimsJSONRequestBody
}

type PutColumnClaimsResponseObject interface {
	VisitPutColumnClaimsResponse(w http.ResponseWriter) error
}

type PutColumnClaims201ResponseHeaders struct {
	Location string
}

type PutColumnClaims201JSONResponse struct {
	Body    ColumnClaim
	Headers PutColumnClaims201ResponseHeaders
}

func (response PutColumnClaims201JSONResponse) VisitPutColumnClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutColumnClaimsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutColumnClaimsdefaultJSONResponse) VisitPutColumnClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteColumnClaimsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteColumnClaimsIdResponseObject interface {
	VisitDeleteColumnClaimsIdResponse(w http.ResponseWriter) error
}

type DeleteColumnClaimsId204Response struct {
}

func (response DeleteColumnClaimsId204Response) VisitDeleteColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteColumnClaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteColumnClaimsId404JSONResponse) VisitDeleteColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnClaimsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetColumnClaimsIdResponseObject interface {
	VisitGetColumnClaimsIdResponse(w http.ResponseWriter) error
}

type GetColumnClaimsId200JSONResponse ColumnClaim

func (response GetColumnClaimsId200JSONResponse) VisitGetColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetColumnClaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetColumnClaimsId404JSONResponse) VisitGetColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnClaimsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PutColumnClaimsIdJSONRequestBody
}

type PutColumnClaimsIdResponseObject interface {
	VisitPutColumnClaimsIdResponse(w http.ResponseWriter) error
}

type PutColumnClaimsId204Response struct {
}

func (response PutColumnClaimsId204Response) VisitPutColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutColumnClaimsId304JSONResponse ColumnClaim

func (response PutColumnClaimsId304JSONResponse) VisitPutColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnClaimsId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutColumnClaimsId404JSONResponse) VisitPutColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutColumnClaimsIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutColumnClaimsIddefaultJSONResponse) VisitPutColumnClaimsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnumsRequestObject struct {
}

type GetEnumsResponseObject interface {
	VisitGetEnumsResponse(w http.ResponseWriter) error
}

type GetEnums200JSONResponse []Enum

func (response GetEnums200JSONResponse) VisitGetEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetEnumsdefaultJSONResponse) VisitGetEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutEnumsRequestObject struct {
	Body *PutEnumsJSONRequestBody
}

type PutEnumsResponseObject interface {
	VisitPutEnumsResponse(w http.ResponseWriter) error
}

type PutEnums201ResponseHeaders struct {
	Location string
}

type PutEnums201JSONResponse struct {
	Body    Enum
	Headers PutEnums201ResponseHeaders
}

func (response PutEnums201JSONResponse) VisitPutEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutEnumsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutEnumsdefaultJSONResponse) VisitPutEnumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEnumsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteEnumsIdResponseObject interface {
	VisitDeleteEnumsIdResponse(w http.ResponseWriter) error
}

type DeleteEnumsId204Response struct {
}

func (response DeleteEnumsId204Response) VisitDeleteEnumsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteEnumsId404JSONResponse) VisitDeleteEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetEnumsIdResponseObject interface {
	VisitGetEnumsIdResponse(w http.ResponseWriter) error
}

type GetEnumsId200JSONResponse Enum

func (response GetEnumsId200JSONResponse) VisitGetEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetEnumsId404JSONResponse) VisitGetEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PutEnumsIdJSONRequestBody
}

type PutEnumsIdResponseObject interface {
	VisitPutEnumsIdResponse(w http.ResponseWriter) error
}

type PutEnumsId204Response struct {
}

func (response PutEnumsId204Response) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutEnumsId304JSONResponse Enum

func (response PutEnumsId304JSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(304)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutEnumsId404JSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutEnumsIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutEnumsIddefaultJSONResponse) VisitPutEnumsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all ColumnClaim objects
	// (GET /column_claims)
	GetColumnClaims(ctx context.Context, request GetColumnClaimsRequestObject) (GetColumnClaimsResponseObject, error)
	// Create a ColumnClaim object
	// (PUT /column_claims)
	PutColumnClaims(ctx context.Context, request PutColumnClaimsRequestObject) (PutColumnClaimsResponseObject, error)
	// Delete a ColumnClaim object
	// (DELETE /column_claims/{id})
	DeleteColumnClaimsId(ctx context.Context, request DeleteColumnClaimsIdRequestObject) (DeleteColumnClaimsIdResponseObject, error)
	// Get a ColumnClaim object
	// (GET /column_claims/{id})
	GetColumnClaimsId(ctx context.Context, request GetColumnClaimsIdRequestObject) (GetColumnClaimsIdResponseObject, error)
	// Update a ColumnClaim object
	// (PUT /column_claims/{id})
	PutColumnClaimsId(ctx context.Context, request PutColumnClaimsIdRequestObject) (PutColumnClaimsIdResponseObject, error)
	// List all Enum objects
	// (GET /enums)
	GetEnums(ctx context.Context, request GetEnumsRequestObject) (GetEnumsResponseObject, error)
	// Create a Enum object
	// (PUT /enums)
	PutEnums(ctx context.Context, request PutEnumsRequestObject) (PutEnumsResponseObject, error)
	// Delete a Enum object
	// (DELETE /enums/{id})
	DeleteEnumsId(ctx context.Context, request DeleteEnumsIdRequestObject) (DeleteEnumsIdResponseObject, error)
	// Get a Enum object
	// (GET /enums/{id})
	GetEnumsId(ctx context.Context, request GetEnumsIdRequestObject) (GetEnumsIdResponseObject, error)
	// Update a Enum object
	// (PUT /enums/{id})
	PutEnumsId(ctx context.Context, request PutEnumsIdRequestObject) (PutEnumsIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetColumnClaims operation middleware
func (sh *strictHandler) GetColumnClaims(w http.ResponseWriter, r *http.Request) {
	var request GetColumnClaimsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetColumnClaims(ctx, request.(GetColumnClaimsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetColumnClaims")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetColumnClaimsResponseObject); ok {
		if err := validResponse.VisitGetColumnClaimsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutColumnClaims operation middleware
func (sh *strictHandler) PutColumnClaims(w http.ResponseWriter, r *http.Request) {
	var request PutColumnClaimsRequestObject

	var body PutColumnClaimsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutColumnClaims(ctx, request.(PutColumnClaimsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutColumnClaims")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutColumnClaimsResponseObject); ok {
		if err := validResponse.VisitPutColumnClaimsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteColumnClaimsId operation middleware
func (sh *strictHandler) DeleteColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteColumnClaimsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteColumnClaimsId(ctx, request.(DeleteColumnClaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteColumnClaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteColumnClaimsIdResponseObject); ok {
		if err := validResponse.VisitDeleteColumnClaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetColumnClaimsId operation middleware
func (sh *strictHandler) GetColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetColumnClaimsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetColumnClaimsId(ctx, request.(GetColumnClaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetColumnClaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetColumnClaimsIdResponseObject); ok {
		if err := validResponse.VisitGetColumnClaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutColumnClaimsId operation middleware
func (sh *strictHandler) PutColumnClaimsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PutColumnClaimsIdRequestObject

	request.Id = id

	var body PutColumnClaimsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutColumnClaimsId(ctx, request.(PutColumnClaimsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutColumnClaimsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutColumnClaimsIdResponseObject); ok {
		if err := validResponse.VisitPutColumnClaimsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnums operation middleware
func (sh *strictHandler) GetEnums(w http.ResponseWriter, r *http.Request) {
	var request GetEnumsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnums(ctx, request.(GetEnumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnums")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnumsResponseObject); ok {
		if err := validResponse.VisitGetEnumsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEnums operation middleware
func (sh *strictHandler) PutEnums(w http.ResponseWriter, r *http.Request) {
	var request PutEnumsRequestObject

	var body PutEnumsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnums(ctx, request.(PutEnumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnums")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEnumsResponseObject); ok {
		if err := validResponse.VisitPutEnumsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnumsId operation middleware
func (sh *strictHandler) DeleteEnumsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteEnumsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnumsId(ctx, request.(DeleteEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnumsIdResponseObject); ok {
		if err := validResponse.VisitDeleteEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnumsId operation middleware
func (sh *strictHandler) GetEnumsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetEnumsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnumsId(ctx, request.(GetEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnumsIdResponseObject); ok {
		if err := validResponse.VisitGetEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEnumsId operation middleware
func (sh *strictHandler) PutEnumsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PutEnumsIdRequestObject

	request.Id = id

	var body PutEnumsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnumsId(ctx, request.(PutEnumsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnumsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEnumsIdResponseObject); ok {
		if err := validResponse.VisitPutEnumsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ227bPBJ+FYK7F38BxU5aI1j4antICgPdJkgb7EUQJLQ4stlKpEqOkngDv/uCQ8mW",
	"Jdl1mkNT/LkxZEmcwzczH4ejWx6bLDcaNDo+vOUWXG60A/pzYK2x/iI2GkGjvxR5nqpYoDK6/80Z7e+5",
	"eAqZ8Ff/tJDwIf9Hfym1H566fpA2n88jLsHFVuVeCB/yj6DBqpiVL0T8s8FDU2j5YKoXAju0fzbI6GHQ",
	"z3bYqQPJxjMGWuZGaXQMpwIZ3Hj1CtMZs4CF1Uywwe6AQelXVBpD0L03aZHp96lQmf+bW5ODRRVwHc8w",
	"XDQsKbIxWGYSRi+worQDp8Bq8iLmUFhUesIE0kOTJA6QRzwTNyorMj78V8QzpcP1XsRxlgMfcqURJkAQ",
	"x6kCjRepGENKpggplbdDpMcrtpZLHVqlJ5zQS0SR+oC0oHxrxwqtsDP2HWb9K5EWwDJAIQUKJsamwA5f",
	"ACsfXTHOFCJYvrDYjL9BjGQwLfpZoL/EIhXkoBSYqBTaKH+dAisfsrFwoEUGIcA4Va5uHLOQgAUdg+MR",
	"hxuR5V4gz4x0SxOXyCjZ1naq1Y8C2OiDD2vDeR7xxNhMYAjN/oBH3IKQRzqd8SHaAroip9yFsFbMgq4y",
	"FolIHTTD8d8p4BRsUy1TjgnNgpCFhrExKQjtNXhEOjxxYHckJEqDZARap0ctVMrkbMl7N8MqcytJlNcd",
	"YpnSDEQ8ZdZc81pm73bh48BegX1mmT1zCNn68C7T3JnCxh3ojyRoVDir0CkcWGYNQ2PSkL2xBYEgW9j9",
	"5XXuGJ3OXq03oAJh7t/4USgLkg/PfEYvTGpyRhPpRaSjkt8WNbssxvMOj2u2nuZSILzw5QtfvvDlC1/+",
	"IXzZMulAFx093+8kEG/R9syxVVmSk79Uj3esllJRC5XfmbZtPJ84X70Bd0vUiJM3HbvokZVgQbJUOeIS",
	"kl2+HHGFkHXDWN4ItDiP+P/AmgulJdyAXOHaYM96qiWFyjEvYKcUwP7yq14xY5nRUN3tYN97NSyUigtk",
	"Gi6cryntdU3KS4G/FPhLgT9GgbfLsJpLbZgjsXdG+natUaRGQs3ZWtZm4JyYQAcSDYohEcv3u2iiPr/a",
	"PGzaaOTq0rCg1L7R/q511ePo/t6VZ4bhLTcajhI+PGtSYVhyy4E6oTN+qr9rc+0Pgl8gTU6oKX1nTOpv",
	"BDMiPtrb5xE/pd/Rm9f+mn4P6XdE3HO6P6hZtMYDetphd8tIYSddfbY/79T5CcU4BZ+n3ptw5glnK1YN",
	"B81Wp50mKL4qAhSHxoKa6PDnxFyfQLKlm1HlRdvfcxp1Kp2YaooqYvIWMqFSPuQTK6Yi6yXGgsN/59ag",
	"0f5RLzZZtTcO+Ud6ix3SWzzihfVrp4i5G/b7uYGdcJTsmbEzKQD2jJ30eZt4mYQ4FVagugKWCS0mkIFG",
	"9vZ4xBJK7CwrtCfIIJDRXkGE7yNxLHBK5HXjz6EoxkUqLCPa9idT12NffWS8tCDcsctaV+8uI3Y9Vf5I",
	"BLkF5zWHKDp/WLrsSYHx/uAyCAuTBKUbWoWWjTs+NVEhxf346IB9CaYHld4Y312AdQGDvd5ub5eOeDlo",
	"kSs+5G/oVsRzgVPKyn6w6iImEf5OZ5J+8lwu0nTl5BJCT5OYHCzNyUeSeBHrUNBeUpvyv97dvdOgfbFj",
	"bBos1A+5rb2kPYT/VO5NXe6s7OidShfuLL4xRNwVWSbs7GdYzSOeFx0Av6fNmImORS18j4s2vj8KcEjs",
	"/lDfMFYQXWUDv5XOW1HdezzVXVj5zXsKQoIl/Z9MUNWRu+WTimCrvqeNdI9HNQubfDi/b2JsirF/c7UW",
	"+7dKzoM3KSB0tR+4Xb58IAH1lBlJ4gArMkDC76zVPi4acwj9svJ3PW0suZoOP6tZUcev1co3m4j5eSuH",
	"Bh2VUXPwiBxk5JCP6Em52pfVICzeHJbah7l6ZAJCayITdVPi1vA36PDZYr/7ZPXbjuhDBXJtUNbxbjhd",
	"/xLv3iWQndIfLayPuhmU84ittoTBOsClD8ib8PwpUs6fg/5jpEpUUH3HHLsn8W9KMiJ+X+dbNF90sN3Q",
	"dR2QmKdot2iIcoc+a8XyB2uwmlI3d1a1t7tKewnew5dPgOtpm6ilzkfpnmpoPlXbVA/gsmy27JM2RT9s",
	"/5QAf1JnRC49eku0gvrGXmgTxBU7/Q26n3WFVw/Xw/Y7jRBtbnS2ocG7RGlV3h/U09Q+rjyzZmZdBj2T",
	"LmaVhxefTkKahIFd/2qvTzPQVQeOrZFFTDwV1mw94bva4/Pz+f8DAAD//46B2Q0+KgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
